* Chapter 1 - Creating project template and GitHub repository

Creating a well-structured project directory and HTML file is crucial for any web development project. 
It serves as the foundation upon which we will build our movie collection showcase.

By separating concerns and organizing our files into dedicated directories (styles and scripts), we keep our code modular and maintainable. 
The <section> element with the ID movie-list provides a designated area where we will dynamically add our movie cards using JavaScript.

* Chapter 2 - Creating the movies database to export

Creating separate data files is a common practice in web development. 
It allows us to keep our data organized and separate from the application logic. 
By storing the movie data in a JavaScript file, we can easily import and use it in different parts of our application.

In this chapter, we created an array of movie objects, each containing properties like title, poster, and description. 
These properties provide the necessary information to generate the movie cards in our showcase.

Exporting the movies array using the export keyword allows us to import it in other files using the import statement. 
This way, we can access the movie data and use it to generate the movie cards dynamically.

* Chapter 3 - Serialization, Generating HTML

Serialization - Process of converting an object or data structure into a format that can be stored, transmitted, or reconstructed later.
In this example, our JS objects representing movie data are being converted into an HTML string format

In this chapter, we created a JavaScript module that converts the movie data into HTML markup. 
By importing the movie data from the movies-data.js file, we can access the movies array and iterate over each movie object.

Inside the generateMoviesHTML function, we use a for...of loop to go through each movie object and generate the corresponding HTML structure using template literals. 
We dynamically insert the movie poster, title, and description into the appropriate elements.

The generated HTML markup for each movie is concatenated into the movieHTML string, which is then returned by the function. 
This allows us to obtain the complete HTML markup for all the movies.

By exporting the generateMoviesHTML function, we make it available for use in other modules, such as the main module where we will render the movie cards to the DOM.

DOM = Document Object Model, represents a web pages structure

* Chapter 4 - Rendering HTML to the DOM

In this chapter, we created a JavaScript module that renders the movie cards HTML to the DOM. 
The renderMoviesToDOM function takes the generated HTML markup as a parameter and inserts it into the specified DOM element.

We use document.getElementById('movie-list') to select the DOM element with the ID "movie-list". 
This assumes that there is an element in the HTML file with the corresponding ID where we want to display the movie cards.

By setting the innerHTML property of the movieList element to the movieHTML, we effectively insert the movie cards HTML into the webpage. 
This allows the movie cards to be visible and rendered in the browser.

We include error handling using an if statement to check if the movieList element exists. 
If it doesn't exist, we log an error message to the console to help with debugging.

Exporting the renderMoviesToDOM function allows us to use it in other modules, such as the main module where we will orchestrate the movie card generation and rendering process.

* Chapter 5 - Executing the functions to generate and render html on our web page

In this chapter, we brought everything together in the main module (main.js). 
We imported the necessary functions from the movie-converter.js and movie-render.js modules to generate the movie cards HTML and render them to the DOM.

The main.js module serves as the entry point of our application. 
It orchestrates the movie card generation and rendering process by calling the appropriate functions.

First, we call the generateMoviesHTML function to generate the HTML markup for the movie cards based on the movie data. 
The generated HTML is stored in the movieHTML variable.

Next, we call the renderMoviesToDOM function, passing the movieHTML as an argument. 
This function takes the generated HTML and inserts it into the specified DOM element ("movie-list"), effectively displaying the movie cards on the webpage.

By separating concerns into different modules (movies-data.js, movie-converter.js, movie-render.js), we achieve a modular and maintainable codebase. 
Each module has a specific responsibility, making the code easier to understand and modify.